/*
 * This is a modified version of the LinkedList generated by the Gradle 'init' task.
 */
package jvm.roots.branches

class LinkedList<T> {
    var head: Node<T>? = null

    fun add(element: T) {
        val newNode = Node(element)

        val it = tail(head)
        if (it == null) {
            head = newNode
        } else {
            it.next = newNode
        }
    }

    private fun tail(head: Node<T>?): Node<T>? {
        var it: Node<T>?

        it = head
        while (it?.next != null) {
            it = it.next
        }

        return it
    }

    fun size(): Int {
        var size = 0

        var it = head
        while (it != null) {
            ++size
            it = it.next
        }

        return size
    }

    fun get(idx: Int): T {
        var index = idx
        var it = head
        while (index > 0 && it != null) {
            it = it.next
            index--
        }

        if (it == null) {
            throw IndexOutOfBoundsException("Index is out of range")
        }

        return it.data
    }

    /**
     * Collect our custom LinkedList into a normal list to get the conveniences of printing w/o string concatenation
     */
    override fun toString(): String {
        val list = mutableListOf<T>()
        var it: Node<T>?

        it = head
        while (it != null) {
            list.add(it.data)
            it = it.next
        }

        return list.joinToString { it.toString() }
    }

    data class Node<T>(val data: T) {
        var next: Node<T>? = null
    }
}
